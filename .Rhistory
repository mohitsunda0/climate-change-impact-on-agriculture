)
})
# Prediction Trend Visualization
output$prediction_trend <- renderPlotly({
req(prediction())
predict_data <- prediction()$input_data
# Simulated trend data for demonstration
trend_years <- seq(predict_data$Year - 5, predict_data$Year + 5, by = 1)
trend_values <- seq(
predict_data$Average_Temperature_C - 2,
predict_data$Average_Temperature_C + 2,
length.out = length(trend_years)
)
plot_ly(x = trend_years, y = trend_values, type = "scatter", mode = "lines",
line = list(color = "green"), name = "Yield Trend") %>%
layout(
xaxis = list(title = "Year"),
yaxis = list(title = "Predicted Yield (MT/HA)")
)
})
# Include this updated server logic in the original code.
# Output Renderers
output$total_yield_box <- renderValueBox({
valueBox(
"191.67 Million Tons",
"Total Crop Yield",
icon = icon("chart-pie"),
color = "green"
)
})
output$avg_temp_box <- renderValueBox({
valueBox(
paste0(round(mean(data$Average_Temperature_C), 1), "°C"),
"Avg Temperature",
icon = icon("thermometer-half"),
color = "red"
)
})
output$precip_box <- renderValueBox({
valueBox(
paste0(round(mean(data$Total_Precipitation_mm), 1), " mm"),
"Total Precipitation",
icon = icon("tint"),
color = "blue"
)
})
output$prediction_results <- renderTable({
req(prediction())
data.frame(
Crop = prediction()$input_data$Crop_Type,
Year = prediction()$input_data$Year,
Predicted_Yield = round(prediction()$predicted_yield, 2)
)
})
# Visualization Outputs
output$scatter_plot <- renderPlotly({
plot_ly(data, x = ~Average_Temperature_C, y = ~Total_Precipitation_mm,
color = ~Crop_Type, type = "scatter", mode = "markers")
})
output$crop_distribution_plot <- renderPlotly({
crop_summary <- data %>%
group_by(Crop_Type) %>%
summarise(Crop_Yield_MT_per_HA = sum(Crop_Yield_MT_per_HA))
plot_ly(crop_summary, labels = ~Crop_Type, values = ~Crop_Yield_MT_per_HA,
type = "pie", textinfo = "label+percent")
})
output$prediction_trend <- renderPlotly({
plot_ly(x = c(2020, 2025, 2030), y = c(100, 120, 140), type = 'scatter', mode = 'lines')
})
# Advanced Analytics Visualizations
output$bar_plot_yield <- renderPlotly({
plot_ly(data, x = ~Crop_Type, y = ~Crop_Yield_MT_per_HA, type = "bar", color = ~Crop_Type)
})
output$line_plot_temp <- renderPlotly({
plot_ly(data, x = ~Year, y = ~Average_Temperature_C, color = ~Crop_Type, type = "scatter", mode = "lines")
})
output$scatter_plot_precip <- renderPlotly({
plot_ly(data, x = ~Total_Precipitation_mm, y = ~Crop_Yield_MT_per_HA, color = ~Crop_Type, type = "scatter", mode = "markers")
})
output$heatmap_climate <- renderPlotly({
climate_summary <- data %>%
group_by(Crop_Type, Region) %>%
summarise(Avg_Temp = mean(Average_Temperature_C))
climate_matrix <- dcast(climate_summary, Crop_Type ~ Region, value.var = "Avg_Temp")
plot_ly(z = as.matrix(climate_matrix[, -1]), x = colnames(climate_matrix)[-1],
y = climate_matrix$Crop_Type, type = "heatmap")
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Required libraries
if (!require("shiny")) install.packages("shiny")
if (!require("shinythemes")) install.packages("shinythemes")
if (!require("plotly")) install.packages("plotly")
if (!require("ggplot2")) install.packages("ggplot2")
if (!require("dplyr")) install.packages("dplyr")
if (!require("reshape2")) install.packages("reshape2")
if (!require("shinyjs")) install.packages("shinyjs")
if (!require("randomForest")) install.packages("randomForest")
if (!require("caret")) install.packages("caret")
if (!require("shinydashboard")) install.packages("shinydashboard")
if (!require("shinyWidgets")) install.packages("shinyWidgets")
library(shiny)
library(shinythemes)
library(plotly)
library(ggplot2)
library(dplyr)
library(reshape2)
library(shinyjs)
library(randomForest)
library(caret)
library(shinydashboard)
library(shinyWidgets)
# Preprocessing function
preprocess_data <- function(data) {
data %>%
mutate(
Normalized_Yield = scale(Total_Yield),
Climate_Impact_Score = Average_Temperature_C * Total_Precipitation_mm
)
}
# Machine Learning Model Preparation
prepare_ml_model <- function(data) {
features <- c("Average_Temperature_C", "Total_Precipitation_mm", "Year")
target <- "Crop_Yield_MT_per_HA"
set.seed(123)
trainIndex <- createDataPartition(data[[target]], p = 0.8, list = FALSE)
trainData <- data[trainIndex, ]
testData <- data[-trainIndex, ]
rf_model <- randomForest(
formula = as.formula(paste(target, "~ ", paste(features, collapse = " + "))),
data = trainData,
ntree = 100,
importance = TRUE
)
return(list(model = rf_model, test_data = testData))
}
# Prediction Function
predict_crop_yield <- function(model, new_data) {
predict(model$model, newdata = new_data)
}
# UI Design
ui <- dashboardPage(
dashboardHeader(
title = tags$span(style = "font-weight: bold; color: #2E8B57;", "AgriClimate Dashboard"),
titleWidth = 300
),
dashboardSidebar(
sidebarMenu(
menuItem("Climate Overview", tabName = "dashboard", icon = icon("dashboard")),
menuItem("Yield Prediction", tabName = "prediction", icon = icon("chart-line")),
menuItem("Advanced Analytics", tabName = "analytics", icon = icon("chart-bar")),
menuItem("About", tabName = "about", icon = icon("info-circle"))
)
),
dashboardBody(
tags$head(
tags$style(HTML("
.main-header { background-color: ##f5faf7; }
.main-header .logo { background-color: #ffffff; color: white; }
.main-header .navbar { background-color: #2E8B57; }
.skin-blue .main-sidebar { background-color: #F0F4F0; }
.content-wrapper { background-color: #F0F4F0; }
.box { border-top-color: #2E8B57; }
.box-header .box-title { color: #2E8B57; font-weight: bold; }
"))
),
tabItems(
# Dashboard Tab
tabItem(tabName = "dashboard",
fluidRow(
valueBoxOutput("total_yield_box"),
valueBoxOutput("avg_temp_box"),
valueBoxOutput("precip_box")
),
fluidRow(
box(title = "Temperature vs Precipitation", plotlyOutput("scatter_plot"), width = 6),
box(title = "Crop Distribution", plotlyOutput("crop_distribution_plot"), width = 6)
)
),
# Yield Prediction Tab
tabItem(tabName = "prediction",
fluidRow(
box(
title = "Crop Yield Predictor", status = "primary", solidHeader = TRUE,
sliderInput("pred_temp", "Average Temperature (°C)",
min = 0, max = 50, value = 25),
sliderInput("pred_precip", "Total Precipitation (mm)",
min = 0, max = 300, value = 150),
textInput("pred_crop", "Enter Crop Type", value = "Wheat"),
sliderInput("pred_year", "Prediction Year",
min = 2000, max = 2030, value = 2025),
actionButton("predict_btn", "Predict Yield", class = "btn-success")
),
box(
title = "Prediction Results", status = "success", solidHeader = TRUE,
h4("Predicted Yield (MT/HA):"),
verbatimTextOutput("predicted_yield_value"),
h4("Prediction Data:"),
tableOutput("prediction_results")
)
),
fluidRow(
box(
title = "Prediction Trend", status = "info", solidHeader = TRUE,
plotlyOutput("prediction_trend", height = "300px")
)
)
)
)
)
)
# Server Logic
server <- function(input, output, session) {
# Example Data (Replace `data` with actual dataset)
data <- data.frame(
Average_Temperature_C = runif(100, 0, 50),
Total_Precipitation_mm = runif(100, 0, 300),
Year = sample(2000:2023, 100, replace = TRUE),
Crop_Type = sample(c("Wheat", "Rice", "Corn"), 100, replace = TRUE),
Crop_Yield_MT_per_HA = runif(100, 2, 10)
)
# Preprocess Data
processed_data <- reactive({
preprocess_data(data)
})
# Prepare Machine Learning Model
ml_results <- reactive({
prepare_ml_model(processed_data())
})
# Reactive Prediction
prediction <- eventReactive(input$predict_btn, {
req(ml_results())
predict_data <- data.frame(
Average_Temperature_C = input$pred_temp,
Total_Precipitation_mm = input$pred_precip,
Year = input$pred_year,
Crop_Type = input$pred_crop
)
prediction_value <- predict_crop_yield(ml_results(), predict_data)
list(
predicted_yield = round(prediction_value, 2),
input_data = predict_data
)
})
# Prediction Outputs
output$predicted_yield_value <- renderText({
req(prediction())
paste(prediction()$predicted_yield, "MT/HA")
})
output$prediction_results <- renderTable({
req(prediction())
prediction()$input_data
})
}
# Run Application
shinyApp(ui = ui, server = server)
# Required libraries
if (!require("shiny")) install.packages("shiny")
if (!require("shinythemes")) install.packages("shinythemes")
if (!require("plotly")) install.packages("plotly")
if (!require("dplyr")) install.packages("dplyr")
if (!require("randomForest")) install.packages("randomForest")
if (!require("caret")) install.packages("caret")
if (!require("shinydashboard")) install.packages("shinydashboard")
library(shiny)
library(shinythemes)
library(plotly)
library(dplyr)
library(randomForest)
library(caret)
library(shinydashboard)
# Load dataset
#data <- read.csv("climate_change_impact_on_agriculture_2024.csv")
# Preprocessing
data$Crop_Type <- as.factor(data$Crop_Type)
data$Region <- as.factor(data$Region)
# Prepare ML Model
prepare_ml_model <- function(data) {
features <- c(
"Average_Temperature_C",
"Total_Precipitation_mm",
"Irrigation_Access_%",
"Pesticide_Use_KG_per_HA"
)
target <- "Crop_Yield_MT_per_HA"
set.seed(123)
trainIndex <- createDataPartition(data[[target]], p = 0.8, list = FALSE)
trainData <- data[trainIndex, ]
testData <- data[-trainIndex, ]
rf_model <- randomForest(
formula = as.formula(paste(target, "~", paste(features, collapse = " + "))),
data = trainData,
ntree = 100
)
return(list(model = rf_model, test_data = testData))
}
ml_model <- prepare_ml_model(data)
# Required libraries
if (!require("shiny")) install.packages("shiny")
if (!require("shinythemes")) install.packages("shinythemes")
if (!require("plotly")) install.packages("plotly")
if (!require("dplyr")) install.packages("dplyr")
if (!require("randomForest")) install.packages("randomForest")
if (!require("caret")) install.packages("caret")
if (!require("shinydashboard")) install.packages("shinydashboard")
library(shiny)
library(shinythemes)
library(plotly)
library(dplyr)
library(randomForest)
library(caret)
library(shinydashboard)
# Load dataset
#data <- read.csv("climate_change_impact_on_agriculture_2024.csv")
# Preprocessing
data$Crop_Type <- as.factor(data$Crop_Type)
data$Region <- as.factor(data$Region)
# Prepare ML Model
prepare_ml_model <- function(data) {
features <- c(
"`Average_Temperature_C`",
"`Total_Precipitation_mm`",
"`Irrigation_Access_%`",
"`Pesticide_Use_KG_per_HA`"
)
target <- "`Crop_Yield_MT_per_HA`"
set.seed(123)
trainIndex <- createDataPartition(data[[target]], p = 0.8, list = FALSE)
trainData <- data[trainIndex, ]
testData <- data[-trainIndex, ]
rf_model <- randomForest(
formula = as.formula(paste(target, "~", paste(features, collapse = " + "))),
data = trainData,
ntree = 100
)
return(list(model = rf_model, test_data = testData))
}
ml_model <- prepare_ml_model(data)
# Required libraries
if (!require("shiny")) install.packages("shiny")
if (!require("shinythemes")) install.packages("shinythemes")
if (!require("plotly")) install.packages("plotly")
if (!require("dplyr")) install.packages("dplyr")
if (!require("randomForest")) install.packages("randomForest")
if (!require("caret")) install.packages("caret")
if (!require("shinydashboard")) install.packages("shinydashboard")
library(shiny)
library(shinythemes)
library(plotly)
library(dplyr)
library(randomForest)
library(caret)
library(shinydashboard)
# Load dataset
#data <- read.csv("climate_change_impact_on_agriculture_2024.csv")
# Check for missing or invalid values
if (any(is.na(data$Crop_Yield_MT_per_HA))) {
cat("Missing values found in Crop_Yield_MT_per_HA. Imputing or removing missing rows...\n")
data <- data[!is.na(data$Crop_Yield_MT_per_HA), ] # Remove rows with NA
}
# Ensure the target column has sufficient unique values
if (length(unique(data$Crop_Yield_MT_per_HA)) < 2) {
stop("The target column 'Crop_Yield_MT_per_HA' must have at least two unique values for partitioning.")
}
# Preprocessing
data$Crop_Type <- as.factor(data$Crop_Type)
data$Region <- as.factor(data$Region)
# Prepare ML Model
prepare_ml_model <- function(data) {
features <- c(
"`Average_Temperature_C`",
"`Total_Precipitation_mm`",
"`Irrigation_Access_%`",
"`Pesticide_Use_KG_per_HA`"
)
target <- "`Crop_Yield_MT_per_HA`"
set.seed(123)
trainIndex <- createDataPartition(data[[target]], p = 0.8, list = FALSE)
trainData <- data[trainIndex, ]
testData <- data[-trainIndex, ]
rf_model <- randomForest(
formula = as.formula(paste(target, "~", paste(features, collapse = " + "))),
data = trainData,
ntree = 100
)
return(list(model = rf_model, test_data = testData))
}
ml_model <- prepare_ml_model(data)
set.seed(123)
trainIndex <- createDataPartition(data[[target]], p = 0.8, list = FALSE)
target <- "`Crop_Yield_MT_per_HA`"
trainIndex <- createDataPartition(data[[target]], p = 0.8, list = FALSE)
# Load required libraries
library(shiny)
library(randomForest)
library(caret)
library(dplyr)
# Load dataset
#data <- read.csv("climate_change_impact_on_agriculture_2024.csv")
# Data validation and preprocessing
if (any(is.na(data$Crop_Yield_MT_per_HA))) {
cat("Missing values detected in 'Crop_Yield_MT_per_HA'. Removing rows with NA...\n")
data <- data %>% filter(!is.na(Crop_Yield_MT_per_HA)) # Remove rows with missing values
}
if (length(unique(data$Crop_Yield_MT_per_HA)) < 2) {
stop("The target variable 'Crop_Yield_MT_per_HA' must have at least two distinct values.")
}
# Ensure columns are correctly typed
data$Crop_Type <- as.factor(data$Crop_Type)
data$Region <- as.factor(data$Region)
# Prepare ML model function
prepare_ml_model <- function(data) {
features <- c(
"Average_Temperature_C",
"Total_Precipitation_mm",
"Irrigation_Access_%",
"Pesticide_Use_KG_per_HA"
)
target <- "Crop_Yield_MT_per_HA"
set.seed(123) # Ensure reproducibility
# Create training and testing datasets
trainIndex <- createDataPartition(data[[target]], p = 0.8, list = FALSE)
trainData <- data[trainIndex, ]
testData <- data[-trainIndex, ]
# Train random forest model
rf_model <- randomForest(
formula = as.formula(paste(target, "~", paste(features, collapse = " + "))),
data = trainData,
ntree = 100
)
return(list(model = rf_model, test_data = testData))
}
# Train the model
ml_model <- prepare_ml_model(data)
# Load required libraries
library(shiny)
library(randomForest)
library(caret)
library(dplyr)
# Load dataset
#data <- read.csv("climate_change_impact_on_agriculture_2024.csv")
# Rename columns to valid R variable names
colnames(data) <- make.names(colnames(data))
# Check if target variable exists and has enough data
if (!"Crop_Yield_MT_per_HA" %in% colnames(data)) {
stop("The target variable 'Crop_Yield_MT_per_HA' is missing from the dataset.")
}
if (any(is.na(data$Crop_Yield_MT_per_HA))) {
cat("Missing values detected in 'Crop_Yield_MT_per_HA'. Removing rows with NA...\n")
data <- data %>% filter(!is.na(Crop_Yield_MT_per_HA)) # Remove rows with missing values
}
if (length(unique(data$Crop_Yield_MT_per_HA)) < 2) {
stop("The target variable 'Crop_Yield_MT_per_HA' must have at least two distinct values.")
}
# Ensure all variables used in the model are numeric or categorical
data$Irrigation_Access <- as.numeric(data$Irrigation_Access)
# Load required libraries
library(shiny)
library(randomForest)
library(caret)
library(dplyr)
# Load dataset
#data <- read.csv("climate_change_impact_on_agriculture_2024.csv")
# Rename columns to valid R variable names
colnames(data) <- make.names(colnames(data))
# Check if target variable exists and has enough data
if (!"Crop_Yield_MT_per_HA" %in% colnames(data)) {
stop("The target variable 'Crop_Yield_MT_per_HA' is missing from the dataset.")
}
if (any(is.na(data$Crop_Yield_MT_per_HA))) {
cat("Missing values detected in 'Crop_Yield_MT_per_HA'. Removing rows with NA...\n")
data <- data %>% filter(!is.na(Crop_Yield_MT_per_HA)) # Remove rows with missing values
}
if (length(unique(data$Crop_Yield_MT_per_HA)) < 2) {
stop("The target variable 'Crop_Yield_MT_per_HA' must have at least two distinct values.")
}
# Ensure all variables used in the model are numeric or categorical
data$Irrigation_Access <- as.numeric(data$Irrigation_Access)
runApp('test.R')
runApp('test.R')
runApp('test.R')
library(shiny); runApp('test2.R')
runApp('test3.R')
runApp('test2.R')
runApp('test3.R')
runApp('test3.R')
runApp('test3.R')
runApp('test3.R')
runApp('test3.R')
runApp('test3.R')
library(shiny); runApp('test3.R')
runApp('test3.R')
runApp('test3.R')
runApp('test3.R')
runApp('test3.R')
runApp('test3.R')
library(shiny); runApp('test4.R')
runApp('projectf.R')
runApp('test4.R')
runApp('test4.R')
runApp('test4.R')
library(shiny); runApp('test3.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
library(shiny); runApp('example.R')
runApp('example.R')
